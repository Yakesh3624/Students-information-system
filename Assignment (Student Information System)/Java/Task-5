import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import exception.DuplicateEnrollmentException;
import exception.InsufficientFundsException;
import exception.InvalidStudentDataException;
import exception.PaymentValidationException;

public class student{
	int student_id;
	String first_name;
	String last_name; 
	LocalDate date_of_birth; 
	String email;
	String phone_number;
	List<enrollment> enrolledCourses = new ArrayList<>(); 
	List<payment>  payment = new ArrayList<>();
	
	student(int id,String firstName, String lastName, LocalDate dob,String email, String phone) throws InvalidStudentDataException
	{
		if(id<=0)
		{
			throw new InvalidStudentDataException("Student ID must be positive");
		}
		if(phone.length()!=10)
		{
			throw new InvalidStudentDataException("Invalid Phone number");
		}
		if(firstName.length()<3)
		{
			throw new InvalidStudentDataException("Invalid First name");
		}
		student_id=id;
		first_name=firstName;
		last_name=lastName;
		date_of_birth=dob;
		this.email=email;
		phone_number=phone;
			
	}
	
	void enrollInCourse(course Course) throws Exception
	{
		for(enrollment e:enrolledCourses)
		{
			if(e.course_id==Course.course_id)
			{
				throw new DuplicateEnrollmentException();
			}
		}
		enrollment e = new enrollment(1,this.student_id,Course.course_id,LocalDate.now());
		e.student.add(this);
		e.course.add(Course);
		enrolledCourses.add(e);
		Course.enrollments.add(e);
	
	}
	
	void updateStudentInfo(int id,String firstName, String lastName, LocalDate dateOfBirth, String email, String phoneNumber) throws InvalidStudentDataException
	{
		if(phoneNumber.length()!=10)
		{
			throw new InvalidStudentDataException("Invalid Phone number");
		}
		if(firstName.length()<3)
		{
			throw new InvalidStudentDataException("Invalid First name");
		}
		first_name=firstName;
		last_name=lastName;
		date_of_birth=dateOfBirth;
		this.email=email;
		phone_number=phoneNumber;
	}
	
	void makePayment(double amount) throws InsufficientFundsException, PaymentValidationException
	{
		
		payment p = new payment(1,this.student_id,amount,LocalDate.now());
		p.payments.add(this);
		payment.add(p);
		
	}
	void displayStudentInfo()
	{
		System.out.println("Student ID    : "+student_id);
		System.out.println("First Name    : "+first_name);
		System.out.println("Last Name     : "+last_name);
		System.out.println("Date of Birth : "+date_of_birth);
		System.out.println("Email ID      : "+email);
		System.out.println("Phone Number  : "+phone_number);
	}
	List<enrollment> getEnrolledCourses()
	{
		return enrolledCourses;
	}
	List<payment> getPaymentHistory()
	{
		return payment;
	}
}



import java.util.ArrayList;
import java.util.List;

import exception.InvalidCourseDataException;
public class course {
	int course_id; 
	String course_name; 
	int credits; 
	int teacher_id;
	List<enrollment> enrollments = new ArrayList<>();
	List<teacher> teachers = new ArrayList<>();
	
	course(int id,String name, int credits, int teach_id) throws InvalidCourseDataException
	{
		if(id<=0)
		{
			throw new InvalidCourseDataException("Invalid Course ID");
		}
		if(name.length()<3)
		{
			throw new InvalidCourseDataException("Invalid Course name");
		}
		if(credits <0)
		{
			throw new InvalidCourseDataException("Invalid Credits");
		}
		course_id=id;
		course_name=name;
		this.credits=credits;
		
	}
	
	void AssignTeacher(teacher Teacher)
	{
		this.teacher_id=Teacher.teacher_id;
		teachers.add(Teacher);
		Teacher.courses.add(this);
	}
	void UpdateCourseInfo(int id,String courseName,int cred, int t_id ) throws InvalidCourseDataException
	{
		if(id<=0)
		{
			throw new InvalidCourseDataException("Invalid Course ID");
		}
		if(courseName.length()<3)
		{
			throw new InvalidCourseDataException("Invalid Course name");
		}
		if(cred <0)
		{
			throw new InvalidCourseDataException("Invalid Credits");
		}
		course_name=courseName;
		credits=cred;
		teacher_id=t_id;
	}
	void displayCourseInfo()
	{
		System.out.println("Course ID   : "+course_id);
		System.out.println("Course Name : "+course_name);
		System.out.println("Credits     : "+credits);
		System.out.println("Teacher ID  : "+teacher_id);
	}
	List<enrollment> getEnrollments()
	{
		return enrollments;
	}
	List<teacher> getTeacher()
	{
		return teachers;
	}

}




import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import exception.InvalidEnrollmentDataException;

public class enrollment {
	int enrollment_id; 
	int student_id; 
	int course_id; 
	LocalDate enrollment_date; 
	List<student> student = new ArrayList<>();
	List<course> course = new ArrayList<>();
	
	enrollment(int id, int student_id, int course_id,	LocalDate enrollment_date) throws InvalidEnrollmentDataException
	{
		if(id<=0)
		{
			throw new InvalidEnrollmentDataException("Invalid Enrollment ID");
		}
		if(student_id<=0)
		{
			throw new InvalidEnrollmentDataException("Invalid Student ID");
		}
		if(course_id<=0)
		{
			throw new InvalidEnrollmentDataException("Invalid Course ID");
		}
		enrollment_id=id; 
		this.student_id=student_id; 
		this.course_id=course_id; 
		this.enrollment_date=enrollment_date;
	}
	
	List<student> getStudent()
	{
		return student;
	}
	List<course> getCourse()
	{
		return course;
	}
}




import java.util.ArrayList;
import java.util.List;
import exception.InvalidTeacherDataException;

public class teacher {
	int teacher_id;
	String first_name;
	String last_name ;
	String email;
	List<course> courses = new ArrayList<>();
	teacher(int id,String fname,String lname,String email) throws InvalidTeacherDataException
	{
		if(id<=0)
		{
			throw new InvalidTeacherDataException("Invalid Enrollment ID");
		}
		if(fname.length()<3)
		{
			throw new InvalidTeacherDataException("Invalid Enrollment ID");
		}
		teacher_id=id;
		first_name=fname;
		last_name =lname;
		this.email=email;
	}
	
	void UpdateTeacherInfo(int id,String firstName,String lastName, String email) throws InvalidTeacherDataException
	{
		if(id<=0)
		{
			throw new InvalidTeacherDataException("Invalid Enrollment ID");
		}
		if(firstName.length()<3)
		{
			throw new InvalidTeacherDataException("Invalid Enrollment ID");
		}
		first_name=firstName;
		last_name=lastName;
		this.email=email;
	}
	void displayTeacherInfo()
	{
		System.out.println("Teacher ID : "+teacher_id);
		System.out.println("First Name : "+first_name);
		System.out.println("Last Name  : "+last_name);
		System.out.println("Email ID   : "+email);
	}
	List<course> getAssignedCourses()
	{
		return courses;
	}

}




import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import exception.InsufficientFundsException;
import exception.PaymentValidationException;

public class payment {
	int payment_id; 
	int student_id; 
	double amount; 
	LocalDate payment_date;
	List<student> payments = new ArrayList<>();
	
	payment(int id,int s_id,double amount,LocalDate date) throws InsufficientFundsException, PaymentValidationException
	{
		if(amount<=0)
		{
			throw new InsufficientFundsException();
		}
		if(id<=0)
		{
			throw new PaymentValidationException("Invalid Payment ID");
		}
		if(s_id<=0)
		{
			throw new PaymentValidationException("Invalid Student ID");
		}
		
		payment_id=id; 
		student_id=s_id; 
		this.amount=amount; 
		payment_date=date;
	}
	List<student> getStudent()
	{
		return payments;
	}
	double getPaymentAmount()
	{
		return this.amount;
	}
	LocalDate getPaymentDate()
	{
		return this.payment_date;
	}

}



import java.time.LocalDate;

import exception.InsufficientFundsException;
import exception.InvalidEnrollmentDataException;
import exception.PaymentValidationException;

public class sis {
	
	void enrollStudentInCourse(student Student, course Course) throws InvalidEnrollmentDataException
	{
		enrollment e = new enrollment(1,Student.student_id,Course.course_id,LocalDate.now());
		e.student.add(Student);
		e.course.add(Course);
	}
	void assignTeacherToCourse(teacher Teacher, course Course)
	{
		Course.AssignTeacher(Teacher);
		Teacher.courses.add(Course);
	}
	void recordPayment(student Student, double amount, LocalDate date) throws InsufficientFundsException, PaymentValidationException
	{
		payment p = new payment(1,Student.student_id,amount,date);
		Student.payment.add(p);
		p.payments.add(Student);
	}
	void generateEnrollmentReport(course Course)
	{
		
	}
	void generatePaymentReport(student Student)
	{
		
	}
	void calculateCourseStatistics(course Course)
	{
		
	}
}
